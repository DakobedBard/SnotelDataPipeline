/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.mddarr.avro.tweet;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6740337295183621948L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"org.mddarr.avro.tweet\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"screename\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"first name\"},{\"name\":\"location\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"none\"},{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Tweet ID\"},{\"name\":\"tweet_content\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Tweet\",\"default\":null},{\"name\":\"tweet_time\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tweet> ENCODER =
      new BinaryMessageEncoder<Tweet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tweet> DECODER =
      new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Tweet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Tweet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Tweet to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Tweet from a ByteBuffer. */
  public static Tweet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String name;
  /** first name */
   private java.lang.String screename;
   private java.lang.String location;
  /** Tweet ID */
   private long id;
  /** Tweet */
   private java.lang.String tweet_content;
   private org.joda.time.DateTime tweet_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param screename first name
   * @param location The new value for location
   * @param id Tweet ID
   * @param tweet_content Tweet
   * @param tweet_time The new value for tweet_time
   */
  public Tweet(java.lang.String name, java.lang.String screename, java.lang.String location, java.lang.Long id, java.lang.String tweet_content, org.joda.time.DateTime tweet_time) {
    this.name = name;
    this.screename = screename;
    this.location = location;
    this.id = id;
    this.tweet_content = tweet_content;
    this.tweet_time = tweet_time;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return screename;
    case 2: return location;
    case 3: return id;
    case 4: return tweet_content;
    case 5: return tweet_time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: screename = (java.lang.String)value$; break;
    case 2: location = (java.lang.String)value$; break;
    case 3: id = (java.lang.Long)value$; break;
    case 4: tweet_content = (java.lang.String)value$; break;
    case 5: tweet_time = (org.joda.time.DateTime)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'screename' field.
   * @return first name
   */
  public java.lang.String getScreename() {
    return screename;
  }

  /**
   * Sets the value of the 'screename' field.
   * first name
   * @param value the value to set.
   */
  public void setScreename(java.lang.String value) {
    this.screename = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.String getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.String value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return Tweet ID
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Tweet ID
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'tweet_content' field.
   * @return Tweet
   */
  public java.lang.String getTweetContent() {
    return tweet_content;
  }

  /**
   * Sets the value of the 'tweet_content' field.
   * Tweet
   * @param value the value to set.
   */
  public void setTweetContent(java.lang.String value) {
    this.tweet_content = value;
  }

  /**
   * Gets the value of the 'tweet_time' field.
   * @return The value of the 'tweet_time' field.
   */
  public org.joda.time.DateTime getTweetTime() {
    return tweet_time;
  }

  /**
   * Sets the value of the 'tweet_time' field.
   * @param value the value to set.
   */
  public void setTweetTime(org.joda.time.DateTime value) {
    this.tweet_time = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static org.mddarr.avro.tweet.Tweet.Builder newBuilder() {
    return new org.mddarr.avro.tweet.Tweet.Builder();
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static org.mddarr.avro.tweet.Tweet.Builder newBuilder(org.mddarr.avro.tweet.Tweet.Builder other) {
    return new org.mddarr.avro.tweet.Tweet.Builder(other);
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static org.mddarr.avro.tweet.Tweet.Builder newBuilder(org.mddarr.avro.tweet.Tweet other) {
    return new org.mddarr.avro.tweet.Tweet.Builder(other);
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private java.lang.String name;
    /** first name */
    private java.lang.String screename;
    private java.lang.String location;
    /** Tweet ID */
    private long id;
    /** Tweet */
    private java.lang.String tweet_content;
    private org.joda.time.DateTime tweet_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.mddarr.avro.tweet.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.screename)) {
        this.screename = data().deepCopy(fields()[1].schema(), other.screename);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tweet_content)) {
        this.tweet_content = data().deepCopy(fields()[4].schema(), other.tweet_content);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tweet_time)) {
        this.tweet_time = data().deepCopy(fields()[5].schema(), other.tweet_time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(org.mddarr.avro.tweet.Tweet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.screename)) {
        this.screename = data().deepCopy(fields()[1].schema(), other.screename);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tweet_content)) {
        this.tweet_content = data().deepCopy(fields()[4].schema(), other.tweet_content);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tweet_time)) {
        this.tweet_time = data().deepCopy(fields()[5].schema(), other.tweet_time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'screename' field.
      * first name
      * @return The value.
      */
    public java.lang.String getScreename() {
      return screename;
    }

    /**
      * Sets the value of the 'screename' field.
      * first name
      * @param value The value of 'screename'.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder setScreename(java.lang.String value) {
      validate(fields()[1], value);
      this.screename = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'screename' field has been set.
      * first name
      * @return True if the 'screename' field has been set, false otherwise.
      */
    public boolean hasScreename() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'screename' field.
      * first name
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder clearScreename() {
      screename = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.String getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder setLocation(java.lang.String value) {
      validate(fields()[2], value);
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder clearLocation() {
      location = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * Tweet ID
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Tweet ID
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder setId(long value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Tweet ID
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * Tweet ID
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder clearId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweet_content' field.
      * Tweet
      * @return The value.
      */
    public java.lang.String getTweetContent() {
      return tweet_content;
    }

    /**
      * Sets the value of the 'tweet_content' field.
      * Tweet
      * @param value The value of 'tweet_content'.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder setTweetContent(java.lang.String value) {
      validate(fields()[4], value);
      this.tweet_content = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet_content' field has been set.
      * Tweet
      * @return True if the 'tweet_content' field has been set, false otherwise.
      */
    public boolean hasTweetContent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tweet_content' field.
      * Tweet
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder clearTweetContent() {
      tweet_content = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweet_time' field.
      * @return The value.
      */
    public org.joda.time.DateTime getTweetTime() {
      return tweet_time;
    }

    /**
      * Sets the value of the 'tweet_time' field.
      * @param value The value of 'tweet_time'.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder setTweetTime(org.joda.time.DateTime value) {
      validate(fields()[5], value);
      this.tweet_time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet_time' field has been set.
      * @return True if the 'tweet_time' field has been set, false otherwise.
      */
    public boolean hasTweetTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tweet_time' field.
      * @return This builder.
      */
    public org.mddarr.avro.tweet.Tweet.Builder clearTweetTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0], record.getConversion(0));
        record.screename = fieldSetFlags()[1] ? this.screename : (java.lang.String) defaultValue(fields()[1], record.getConversion(1));
        record.location = fieldSetFlags()[2] ? this.location : (java.lang.String) defaultValue(fields()[2], record.getConversion(2));
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.Long) defaultValue(fields()[3], record.getConversion(3));
        record.tweet_content = fieldSetFlags()[4] ? this.tweet_content : (java.lang.String) defaultValue(fields()[4], record.getConversion(4));
        record.tweet_time = fieldSetFlags()[5] ? this.tweet_time : (org.joda.time.DateTime) defaultValue(fields()[5], record.getConversion(5));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tweet>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tweet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tweet>
    READER$ = (org.apache.avro.io.DatumReader<Tweet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
